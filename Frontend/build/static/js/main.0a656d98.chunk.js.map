{"version":3,"sources":["components/navigationBar.js","components/homepageCard.js","firebase/index.js","firebase/ImageUploader.js","util/helper-functions/timestamp.js","components/homepage.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["navigationBar","props","state","page","Navbar","sticky","variant","expand","className","Brand","href","Nav","Link","NavDropdown","title","id","Item","Form","inline","FormControl","type","placeholder","Button","React","Component","HomepageCard","imageLink","date","time","place","Card","border","bg","text","Img","src","Body","Title","Footer","Check","label","defaultProps","dotenv","config","process","REACT_APP_FIREBASE_API_KEY","REACT_APP_FIREBASE_AUTH_DOMAIN","REACT_APP_FIREBASE_DATABASE_URL","REACT_APP_FIREBASE_PROJECT_ID","REACT_APP_FIREBASE_STORAGE_BUCKET","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebaseStorage","storage","ImageUploader","imageFile","fileName","imageURL","sendImageToFirebaseStorage","a","ref","put","uploadTask","getDownloadURL","downloadURL","fetch","method","headers","body","JSON","stringify","console","log","alert","getImageDownloadURL","this","getTimestampImageString","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","homePage","uploadFile","e","uploader","target","files","message","imageLinks","then","res","json","data","imageMetadata","key","push","setState","map","link","cards","onChange","accept","CardColumns","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0a656d98.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\n\nclass navigationBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            page: this.props.page\n        }\n    }\n    render() {\n        return(\n            <div>\n                <Navbar sticky=\"top\" variant=\"dark\" expand=\"lg\" className=\"NavigationBar\">\n                    <Navbar.Brand href=\"#home\">UBulletin</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link className=\"NavigationBarLink\" href=\"#home\">Home</Nav.Link>\n                        <Nav.Link className=\"NavigationBarLink\" href=\"#create\">Create</Nav.Link>\n                        <NavDropdown title=\"Sort\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Date</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                    <Button variant=\"outline-primary\">Search</Button>\n                </Form>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default navigationBar;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n\nconst HomepageCard = ({\n    imageLink,\n    title,\n    date,\n    time,\n    place\n}) => {\n    return (\n        <Card border=\"primary\" bg=\"light\" text=\"dark\">\n            <Card.Img variant=\"top\" src={imageLink} />\n                <Card.Body>\n                    <Card.Title>{title}\n                            <br></br>\n                            <br></br>\n                            <small>\n                                <div className=\"font-weight-bold\">Date:</div> {date}\n                                <br></br>\n                                <br></br>\n                                <div className=\"font-weight-bold\">Time:</div> {time}\n                                <br></br>\n                                <br></br>\n                                <div className=\"font-weight-bold\">Place:</div> {place}\n                            </small>\n                    </Card.Title>\n                </Card.Body>\n            <Card.Footer>\n                <div className=\"text-right\">\n                    <Form.Check text=\"dark\" type=\"checkbox\" label=\"Like\" />\n                </div>\n            </Card.Footer>\n        </Card>    \n    );\n};\n\nHomepageCard.defaultProps = {\n    title: \"Untitled\",\n    date: \"N/A\",\n    time: \"N/A\",\n    place: \"N/A\"\n}\n\nexport default HomepageCard;","import dotenv from 'dotenv';\nimport firebase from 'firebase';\nimport 'firebase/storage';\n// add firebase credentials here\n\ndotenv.config();\nconst {\n  REACT_APP_FIREBASE_API_KEY,\n  REACT_APP_FIREBASE_AUTH_DOMAIN,\n  REACT_APP_FIREBASE_DATABASE_URL,\n  REACT_APP_FIREBASE_PROJECT_ID,\n  REACT_APP_FIREBASE_STORAGE_BUCKET,\n  REACT_APP_FIREBASE_MESSAGING_SENDER_ID\n} = process.env;\n\n// Create and initialize a Firebase instance\nfirebase.initializeApp({\n  apiKey: REACT_APP_FIREBASE_API_KEY,\n  authDomain: REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: REACT_APP_FIREBASE_MESSAGING_SENDER_ID\n});\n\nconst firebaseStorage = firebase.storage();\n\nexport { firebaseStorage };\n","import { firebaseStorage } from \"./index\";\nimport * as Endpoint from '../constants/Endpoint';\n\n/**\n * upload a single image to firebaseStorage\n */\nexport default class ImageUploader {\n  imageFile = \"\";\n  fileName = \"\";\n  imageURL = \"\";\n\n  /**\n   * @param imageFile the image file to be uploaded to firebase storage\n   * double check that it is an image.\n   * @param fileName please pass in a timestamp as a string followed by\n   * an image format such as 20191007201031.jpg.\n   */\n  constructor(imageFile, fileName) {\n    this.imageFile = imageFile;\n    this.fileName = fileName;\n  }\n\n  sendImageToFirebaseStorage = async () => {\n    try {\n      const uploadTask = await firebaseStorage\n        .ref(`Images/${this.fileName}`)\n        .put(this.imageFile);\n      const downloadURL = await uploadTask.ref.getDownloadURL();\n      this.imageURL = downloadURL;\n      fetch(process.env.REACT_APP_BACKEND_API + Endpoint.UPLOAD_IMAGE_METADATA, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          'image_link': this.imageURL\n        })\n      });\n    } catch (error) {\n      console.log(\"Unable to upload file: \" + this.fileName + \"\\n\" + error);\n      alert(\"Uploading image failed!\");\n    }\n  };\n\n  /** @return a link to the image on firebase that will be stored in the\n   * image metadata.\n   */\n  getImageDownloadURL = () => {\n    return this.imageURL;\n  };\n}\n","export const getTimestampImageString = () => {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    const second = date.getSeconds();\n    const millisecond = date.getMilliseconds();\n    return `${year}${month}${day}${hour}${minute}${second}${millisecond}`;\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport HomepageCard from './homepageCard';\nimport * as Endpoint from '../constants/Endpoint';\nimport ImageUploader from '../firebase/ImageUploader';\nimport { getTimestampImageString } from '../util/helper-functions/timestamp';\n\nclass homePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            page: this.props.page,\n            message: \"\",\n            imageLinks: []\n        }\n    }\n\n    componentDidMount() {\n      fetch(process.env.REACT_APP_BACKEND_API + Endpoint.GET_HOMEPAGE_IMAGE_METADATA)\n      .then(res => res.json())\n      .then(data => {\n        let imageMetadata = [];\n        for (let key in data) {\n          imageMetadata.push(data[key]['image_link']);\n        }\n        this.setState({ imageLinks: imageMetadata });\n      });\n    }\n\n    uploadFile = async (e) => {\n      const uploader = new ImageUploader(e.target.files[0], `${getTimestampImageString()}.jpg`);\n      await uploader.sendImageToFirebaseStorage();\n    }\n\n    render(){\n\n      let images = this.state.imageLinks.map(link => <img src={link} />);\n      let cards = this.state.imageLinks.map(link => <HomepageCard imageLink={link} />);\n\n        return(\n<div>\n  {this.state.message}\n<br></br>\n<input type=\"file\" onChange={this.uploadFile} accept=\"image/*\"></input>\n<CardColumns>\n  {cards}\n</CardColumns>\n</div>\n        );\n    }\n}\nexport default homePage;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport NavigationBar from \"./components/navigationBar.js\";\nimport HomePage from \"./components/homepage.js\";\n\nfunction App() {\n    return (\n        <div>\n          <NavigationBar/>\n            <HomePage/>\n        </div>\n    )\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}