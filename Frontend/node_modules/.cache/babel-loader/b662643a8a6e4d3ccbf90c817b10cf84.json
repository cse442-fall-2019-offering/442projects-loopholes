{"ast":null,"code":"import { firebaseStorage } from \"./index\";\nimport * as Endpoint from \"../constants/Endpoint\";\nimport WaitingPage from \"../components/waitingPage.js\";\n/**\n * upload a single image to firebaseStorage\n */\n\nexport default class ImageUploader {\n  /**\n   * @param imageFile the image file to be uploaded to firebase storage\n   * double check that it is an image.\n   * @param fileName please pass in a timestamp as a string followed by\n   * an image format such as 20191007201031.jpg.\n   */\n  constructor(imageFile, fileName, eventTitle, eventDate, eventTime, eventLocation) {\n    this.imageFile = \"\";\n    this.fileName = \"\";\n    this.imageURL = \"\";\n    this.eventTitle = \"\";\n    this.eventDate = \"\";\n    this.eventTime = \"\";\n    this.eventLocation = \"\";\n\n    this.sendImageToFirebaseStorage = async () => {\n      try {\n        const uploadTask = await firebaseStorage.ref(\"Images/\".concat(this.fileName)).put(this.imageFile);\n        const downloadURL = await uploadTask.ref.getDownloadURL();\n        this.imageURL = downloadURL;\n        fetch(process.env.REACT_APP_BACKEND_API + Endpoint.UPLOAD_IMAGE_METADATA, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            image_link: this.imageURL,\n            event_title: this.eventTitle,\n            event_date: this.eventDate,\n            event_time: this.eventTime,\n            event_location: this.eventLocation\n          })\n        }); // alert(\n        //   \"Image successfully uploaded, please return to the homepage to view it!\"\n        // );\n\n        return 0;\n      } catch (error) {\n        // console.log(\"Unable to upload file: \" + this.fileName + \"\\n\" + error);\n        // alert(\"Uploading image failed!\");\n        return 1;\n      }\n    };\n\n    this.getImageDownloadURL = () => {\n      return this.imageURL;\n    };\n\n    this.imageFile = imageFile;\n    this.fileName = fileName;\n    this.eventTitle = eventTitle;\n    this.eventDate = eventDate;\n    this.eventTime = eventTime;\n    this.eventLocation = eventLocation;\n  }\n\n}","map":{"version":3,"sources":["/Users/brianbalayon/Projects/442projects-loopholes/frontend/src/firebase/ImageUploader.js"],"names":["firebaseStorage","Endpoint","WaitingPage","ImageUploader","constructor","imageFile","fileName","eventTitle","eventDate","eventTime","eventLocation","imageURL","sendImageToFirebaseStorage","uploadTask","ref","put","downloadURL","getDownloadURL","fetch","process","env","REACT_APP_BACKEND_API","UPLOAD_IMAGE_METADATA","method","headers","body","JSON","stringify","image_link","event_title","event_date","event_time","event_location","error","getImageDownloadURL"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,SAA9B;AACA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA;;;;AAGA,eAAe,MAAMC,aAAN,CAAoB;AAS/B;;;;;;AAMAC,EAAAA,WAAW,CACPC,SADO,EAEPC,QAFO,EAGPC,UAHO,EAIPC,SAJO,EAKPC,SALO,EAMPC,aANO,EAOT;AAAA,SArBFL,SAqBE,GArBU,EAqBV;AAAA,SApBFC,QAoBE,GApBS,EAoBT;AAAA,SAnBFK,QAmBE,GAnBS,EAmBT;AAAA,SAlBFJ,UAkBE,GAlBW,EAkBX;AAAA,SAjBFC,SAiBE,GAjBU,EAiBV;AAAA,SAhBFC,SAgBE,GAhBU,EAgBV;AAAA,SAfFC,aAeE,GAfc,EAed;;AAAA,SASFE,0BATE,GAS2B,YAAY;AACrC,UAAI;AACA,cAAMC,UAAU,GAAG,MAAMb,eAAe,CACnCc,GADoB,kBACN,KAAKR,QADC,GAEpBS,GAFoB,CAEhB,KAAKV,SAFW,CAAzB;AAGA,cAAMW,WAAW,GAAG,MAAMH,UAAU,CAACC,GAAX,CAAeG,cAAf,EAA1B;AACA,aAAKN,QAAL,GAAgBK,WAAhB;AACAE,QAAAA,KAAK,CACDC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoCpB,QAAQ,CAACqB,qBAD5C,EAED;AACIC,UAAAA,MAAM,EAAE,MADZ;AAEIC,UAAAA,OAAO,EAAE;AAAC,4BAAgB;AAAjB,WAFb;AAGIC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,YAAAA,UAAU,EAAE,KAAKjB,QADA;AAEjBkB,YAAAA,WAAW,EAAE,KAAKtB,UAFD;AAGjBuB,YAAAA,UAAU,EAAE,KAAKtB,SAHA;AAIjBuB,YAAAA,UAAU,EAAE,KAAKtB,SAJA;AAKjBuB,YAAAA,cAAc,EAAE,KAAKtB;AALJ,WAAf;AAHV,SAFC,CAAL,CANA,CAoBA;AACA;AACA;;AACA,eAAO,CAAP;AACH,OAxBD,CAwBE,OAAOuB,KAAP,EAAc;AACZ;AACA;AACA,eAAO,CAAP;AACH;AACJ,KAvCC;;AAAA,SA4CFC,mBA5CE,GA4CoB,MAAM;AACxB,aAAO,KAAKvB,QAAZ;AACH,KA9CC;;AACE,SAAKN,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACH;;AA7B8B","sourcesContent":["import {firebaseStorage} from \"./index\";\nimport * as Endpoint from \"../constants/Endpoint\";\nimport WaitingPage from \"../components/waitingPage.js\"\n\n/**\n * upload a single image to firebaseStorage\n */\nexport default class ImageUploader {\n    imageFile = \"\";\n    fileName = \"\";\n    imageURL = \"\";\n    eventTitle = \"\";\n    eventDate = \"\";\n    eventTime = \"\";\n    eventLocation = \"\";\n\n    /**\n     * @param imageFile the image file to be uploaded to firebase storage\n     * double check that it is an image.\n     * @param fileName please pass in a timestamp as a string followed by\n     * an image format such as 20191007201031.jpg.\n     */\n    constructor(\n        imageFile,\n        fileName,\n        eventTitle,\n        eventDate,\n        eventTime,\n        eventLocation\n    ) {\n        this.imageFile = imageFile;\n        this.fileName = fileName;\n        this.eventTitle = eventTitle;\n        this.eventDate = eventDate;\n        this.eventTime = eventTime;\n        this.eventLocation = eventLocation;\n    }\n\n    sendImageToFirebaseStorage = async () => {\n        try {\n            const uploadTask = await firebaseStorage\n                .ref(`Images/${this.fileName}`)\n                .put(this.imageFile);\n            const downloadURL = await uploadTask.ref.getDownloadURL();\n            this.imageURL = downloadURL;\n            fetch(\n                process.env.REACT_APP_BACKEND_API + Endpoint.UPLOAD_IMAGE_METADATA,\n                {\n                    method: \"POST\",\n                    headers: {\"Content-Type\": \"application/json\"},\n                    body: JSON.stringify({\n                        image_link: this.imageURL,\n                        event_title: this.eventTitle,\n                        event_date: this.eventDate,\n                        event_time: this.eventTime,\n                        event_location: this.eventLocation\n                    })\n                }\n            );\n            // alert(\n            //   \"Image successfully uploaded, please return to the homepage to view it!\"\n            // );\n            return 0;\n        } catch (error) {\n            // console.log(\"Unable to upload file: \" + this.fileName + \"\\n\" + error);\n            // alert(\"Uploading image failed!\");\n            return 1;\n        }\n    };\n\n    /** @return a link to the image on firebase that will be stored in the\n     * image metadata.\n     */\n    getImageDownloadURL = () => {\n        return this.imageURL;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}