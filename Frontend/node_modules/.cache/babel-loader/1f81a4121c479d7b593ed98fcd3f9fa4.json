{"ast":null,"code":"var _jsxFileName = \"/Users/brianbalayon/Projects/442projects-loopholes/frontend/src/components/uploadWait.js\";\nimport React, { useState } from \"react\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\nclass UploadWait extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"\"\n    };\n    this.resetState();\n  }\n\n  resetState() {\n    alert(\"1\");\n    this.setState({\n      progress: 0\n    });\n    alert(\"0\");\n  }\n\n  startLoad() {\n    //alert(\"hi\");\n    this.setState({\n      progress: 1\n    });\n    alert(\"start\");\n  }\n\n  endLoad(i) {\n    if (i === 0) {\n      this.setState({\n        progress: 2\n      });\n      alert(\"Nice\");\n    } else {\n      this.setState({\n        progress: 3\n      });\n      alert(\"Oh\");\n    }\n  }\n\n  renderStatus() {\n    if (this.state.progress == 0) {\n      return null;\n    }\n\n    if (this.state.progress == 1) {\n      return React.createElement(\"div\", {\n        className: \"load_overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Loading...\")));\n    } else if (this.state.progress < 3) {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Upload Complete!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \" Go to the homepage to see your upload! \"), React.createElement(Link, {\n        to: \"/CSE442-542/2019-Fall/cse-442i/home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Home\"))));\n    } else if (this.state.progress < 4) {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Upload Failed\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" \", this.state.progress, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \" Try uploading again! \"), React.createElement(Link, {\n        to: \"/CSE442-542/2019-Fall/cse-442i/upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.resetState(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Upload\")), React.createElement(Link, {\n        to: \"/CSE442-542/2019-Fall/cse-442i/home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.resetState(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Home\"))));\n    }\n  }\n\n}\n\nexport default UploadWait;","map":{"version":3,"sources":["/Users/brianbalayon/Projects/442projects-loopholes/frontend/src/components/uploadWait.js"],"names":["React","useState","Spinner","Button","Link","Jumbotron","Container","UploadWait","Component","constructor","props","state","progress","resetState","alert","setState","startLoad","endLoad","i","renderStatus"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Spinner from 'react-bootstrap/Spinner'\nimport Button from 'react-bootstrap/Button'\nimport {Link} from 'react-router-dom';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\n\nclass UploadWait extends React.Component {\n\n    state = {\n        progress: \"\",\n    };\n\n    constructor(props) {\n        super(props);\n        this.resetState();\n    }\n\n    resetState() {\n        alert(\"1\");\n        this.setState({progress: 0});\n        alert(\"0\");\n    }\n\n    startLoad() {\n        //alert(\"hi\");\n        this.setState({progress: 1});\n        alert(\"start\");\n    }\n\n    endLoad(i) {\n        if (i === 0) {\n            this.setState({progress: 2});\n            alert(\"Nice\")\n        } else {\n            this.setState({progress: 3});\n            alert(\"Oh\")\n        }\n    }\n\n    renderStatus() {\n        if (this.state.progress == 0) {\n            return null;\n        }\n        if (this.state.progress == 1) {\n            return (\n                <div className={\"load_overlay\"}>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                </div>\n            );\n        } else if (this.state.progress < 3) {\n            return (\n                <Jumbotron fluid>\n                    <Container>\n                        <h1>Upload Complete!</h1>\n                        <p> Go to the homepage to see your upload! </p>\n                        <Link to=\"/CSE442-542/2019-Fall/cse-442i/home\">\n                            <Button variant=\"primary\">Home</Button>\n                        </Link>\n                    </Container>\n                </Jumbotron>\n            );\n        } else if (this.state.progress < 4 ) {\n            return (\n                <Jumbotron fluid>\n                    <Container>\n                        <h1>Upload Failed</h1>\n                        <p> { this.state.progress } </p>\n                        <p> Try uploading again! </p>\n                        <Link to=\"/CSE442-542/2019-Fall/cse-442i/upload\">\n                            <Button onClick={this.resetState()}>Upload</Button>\n                        </Link>\n                        <Link to=\"/CSE442-542/2019-Fall/cse-442i/home\">\n                            <Button onClick={this.resetState()}>Home</Button>\n                        </Link>\n                    </Container>\n                </Jumbotron>\n            );\n        }\n    }\n\n}\n\nexport default UploadWait;\n"]},"metadata":{},"sourceType":"module"}