{"ast":null,"code":"import { firebaseStorage } from \"./index\";\nimport * as Endpoint from '../constants/Endpoint';\n/**\n * upload a single image to firebaseStorage\n */\n\nexport default class ImageUploader {\n  /**\n   * @param imageFile the image file to be uploaded to firebase storage\n   * double check that it is an image.\n   * @param fileName please pass in a timestamp as a string followed by\n   * an image format such as 20191007201031.jpg.\n   */\n  constructor(imageFile, fileName) {\n    this.imageFile = \"\";\n    this.fileName = \"\";\n    this.imageURL = \"\";\n\n    this.sendImageToFirebaseStorage = async () => {\n      try {\n        const uploadTask = await firebaseStorage.ref(\"Images/\".concat(this.fileName)).put(this.imageFile);\n        const downloadURL = await uploadTask.ref.getDownloadURL();\n        this.imageURL = downloadURL;\n        fetch(process.env.REACT_APP_BACKEND_API + Endpoint.UPLOAD_IMAGE_METADATA, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'image_link': this.imageURL\n          })\n        });\n      } catch (error) {\n        console.log(\"Unable to upload file: \" + this.fileName + \"\\n\" + error);\n        alert(\"Uploading image failed!\");\n      }\n    };\n\n    this.getImageDownloadURL = () => {\n      return this.imageURL;\n    };\n\n    this.imageFile = imageFile;\n    this.fileName = fileName; //console.log(imageFile);\n    //console.log(fileName);\n  }\n\n}","map":{"version":3,"sources":["/Users/brianbalayon/Projects/442projects-loopholes/frontend/src/firebase/ImageUploader.js"],"names":["firebaseStorage","Endpoint","ImageUploader","constructor","imageFile","fileName","imageURL","sendImageToFirebaseStorage","uploadTask","ref","put","downloadURL","getDownloadURL","fetch","process","env","REACT_APP_BACKEND_API","UPLOAD_IMAGE_METADATA","method","headers","body","JSON","stringify","error","console","log","alert","getImageDownloadURL"],"mappings":"AAAA,SAASA,eAAT,QAAgC,SAAhC;AACA,OAAO,KAAKC,QAAZ,MAA0B,uBAA1B;AAEA;;;;AAGA,eAAe,MAAMC,aAAN,CAAoB;AAKjC;;;;;;AAMAC,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAAA,SAVjCD,SAUiC,GAVrB,EAUqB;AAAA,SATjCC,QASiC,GATtB,EASsB;AAAA,SARjCC,QAQiC,GARtB,EAQsB;;AAAA,SAOjCC,0BAPiC,GAOJ,YAAY;AACvC,UAAI;AACF,cAAMC,UAAU,GAAG,MAAMR,eAAe,CACrCS,GADsB,kBACR,KAAKJ,QADG,GAEtBK,GAFsB,CAElB,KAAKN,SAFa,CAAzB;AAGA,cAAMO,WAAW,GAAG,MAAMH,UAAU,CAACC,GAAX,CAAeG,cAAf,EAA1B;AACA,aAAKN,QAAL,GAAgBK,WAAhB;AACAE,QAAAA,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAoCf,QAAQ,CAACgB,qBAA9C,EAAqE;AACxEC,UAAAA,MAAM,EAAE,MADgE;AAExEC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAF+D;AAGxEC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,0BAAc,KAAKhB;AADA,WAAf;AAHkE,SAArE,CAAL;AAOD,OAbD,CAaE,OAAOiB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4B,KAAKpB,QAAjC,GAA4C,IAA5C,GAAmDkB,KAA/D;AACAG,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACD;AACF,KAzBgC;;AAAA,SA8BjCC,mBA9BiC,GA8BX,MAAM;AAC1B,aAAO,KAAKrB,QAAZ;AACD,KAhCgC;;AAC/B,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB,CAF+B,CAG/B;AACA;AACD;;AAhBgC","sourcesContent":["import { firebaseStorage } from \"./index\";\nimport * as Endpoint from '../constants/Endpoint';\n\n/**\n * upload a single image to firebaseStorage\n */\nexport default class ImageUploader {\n  imageFile = \"\";\n  fileName = \"\";\n  imageURL = \"\";\n\n  /**\n   * @param imageFile the image file to be uploaded to firebase storage\n   * double check that it is an image.\n   * @param fileName please pass in a timestamp as a string followed by\n   * an image format such as 20191007201031.jpg.\n   */\n  constructor(imageFile, fileName) {\n    this.imageFile = imageFile;\n    this.fileName = fileName;\n    //console.log(imageFile);\n    //console.log(fileName);\n  }\n\n  sendImageToFirebaseStorage = async () => {\n    try {\n      const uploadTask = await firebaseStorage\n        .ref(`Images/${this.fileName}`)\n        .put(this.imageFile);\n      const downloadURL = await uploadTask.ref.getDownloadURL();\n      this.imageURL = downloadURL;\n      fetch(process.env.REACT_APP_BACKEND_API + Endpoint.UPLOAD_IMAGE_METADATA, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          'image_link': this.imageURL\n        })\n      });\n    } catch (error) {\n      console.log(\"Unable to upload file: \" + this.fileName + \"\\n\" + error);\n      alert(\"Uploading image failed!\");\n    }\n  };\n\n  /** @return a link to the image on firebase that will be stored in the\n   * image metadata.\n   */\n  getImageDownloadURL = () => {\n    return this.imageURL;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}